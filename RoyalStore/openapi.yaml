openapi: 3.1.3
info:
  title: Royal Store
  description: Royal Store REST API Description
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
tags:
  - name: users
    description: Endpoints related to authenticating and managing goods of a single user. Often times they require the JWT as authentication method.
  - name: laptops
    description: Endpoints used to create, delete and manage products in the laptops category. Requires the "admin" role.
  - name: smartphones
    description: Endpoints used to create, delete and manage products in the smartphones category. Requires the "admin" role.
  - name: products
    description: Generic and polymorphic endpoints that work with all product categories.
components:
  securitySchemes:
    jwt:
      type: apiKey
      in: header
      name: Authorization
      description: JSON Web Token that conveys user claims and signature. It's needed for all authenticated endpoints.
paths:
  /register:
    post:
      summary: Creates a new user entry in the database.
      tags:
        - users
      requestBody:
        description: User credentials, the email, password and remember-me flag.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "hello@there.com"
                password:
                  type: string
                  example: "FYckQ8tvTsxWVqVcRMgwBdP2HdafKqg3"
                rememberMe:
                  type: boolean
                  example: true
                roles:
                  type: array
                  example: ["admin"]
                profilePicture:
                  type: file
      responses:
        '200':
          description: User is successfully registered.
        '302':
          description: Another user with the same email is already registered.
        '400':
          description: The user credentials are not valid. This could happen wither if the password is blank or email doesn't contain the domain.

  /login:
    post:
      summary: Attempts to log user in using JWT authentication.
      tags:
        - users
      requestBody:
        description: Credentials of the user, email, raw text password and the remember-me flag.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "hello@there.com"
                password:
                  type: string
                  example: "FYckQ8tvTsxWVqVcRMgwBdP2HdafKqg3"
                rememberMe:
                  type: boolean
                  example: true
      responses:
        '200':
          description: User is logged in, and the information about user is attached in the response body.
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "hello@there.com"
                  password:
                    type: string
                    example: "FYckQ8tvTsxWVqVcRMgwBdP2HdafKqg3"
                  rememberMe:
                    type: boolean
                    example: true
                  token:
                    type: string
                    description: The JSON Web Token that must be attached to the "Authorization" header in each protected request.
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  roles:
                    type: array
                    description: The roles user have.
                    example: ["admin"]
                  profilePicture:
                    type: array
        '404':
          description: No user is registered under the given email.
        '400':
          description: Password does not match.

  /get-cart:
    get:
      description: Retrieves the list of products the user added to their cart.
      security:
        - jwt: []
      tags:
        - users
      parameters:
        - name: email
          in: path
          required: true
          example: "hello@there.com"
          schema:
            type: string
      responses:
        '200':
          description: Cart is found and returned.
          application/json:
            schema:
              type: array
        '404':
          description: No such user exists as stated by the JWT.
        '401':
          description: User session has expired and user must log in again.

  /get-liked:
    get:
      summary: Retrieves all products users added to their preferred ones.
      security:
        - jwt: []
      tags:
        - users
      parameters:
        - name: email
          in: path
          required: true
          example: "hello@there.com"
          schema:
            type: string
      responses:
        '200':
          description: Liked products are found and returned.
          application/json:
            schema:
              type: array
        '404':
          description: No such user exists as stated by the JWT.
        '401':
          description: User session has expired and user must log in again.

  /get-purchased:
    get:
      summary: Retrieves all products user has bought.
      security:
        - jwt: []
      tags:
        - users
      parameters:
        - name: email
          in: path
          required: true
          example: "hello@there.com"
          schema:
            type: string
      responses:
        '200':
          description: Purchased products are found and returned.
          application/json:
            schema:
              type: array
        '404':
          description: No such user exists as stated by the JWT.
        '401':
          description: User session has expired and user must log in again.

  /add-product-to-cart:
    put:
      summary: Adds a selected product to the user's cart.
      security:
        - jwt: []
      tags:
        - users
      parameters:
        - name: email
          in: path
          required: true
          example: "hello@there.com"
          schema:
            type: string
        - name: id
          in: path
          required: true
          example: "65a7ca3646c4604a98e143df"
          schema:
            type: string
      responses:
        '200':
          description: A product was successfully added to the cart.
        '404':
          description: Requested user or product does not exist.

  /add-product-to-liked:
    put:
      summary: Adds a selected product to the user's liked list.
      security:
        - jwt: []
      tags:
        - users
      parameters:
        - name: email
          in: path
          required: true
          example: "hello@there.com"
          schema:
            type: string
        - name: id
          in: path
          required: true
          example: "65a7ca3646c4604a98e143df"
          schema:
            type: string
      responses:
        '200':
          description: A product was successfully added to the liked.
        '404':
          description: Requested user or product does not exist.

  /purchase:
    put:
      summary: Adds a product to the list of purchased ones.
      description: Emulates a purchased order. Removes a product from the cart if it is there and adds to the purchased list.
      security:
        - jwt: []
      tags:
        - users
      parameters:
        - name: email
          in: path
          required: true
          example: "hello@there.com"
          schema:
            type: string
        - name: id
          in: path
          required: true
          example: "65a7ca3646c4604a98e143df"
          schema:
            type: string
      responses:
        '200':
          description: A product was successfully bought by user.
        '404':
          description: Requested user or product does not exist.

  /remove-product-from-cart:
    delete:
      summary: Deletes a selected product from the cart.
      security:
        - jwt: []
      tags:
        - users
      parameters:
        - name: email
          in: path
          required: true
          example: "hello@there.com"
          schema:
            type: string
        - name: id
          in: path
          required: true
          example: "65a7ca3646c4604a98e143df"
          schema:
            type: string
      responses:
        '200':
          description: A product was removed from the cart.
        '404':
          description: Requested user or product doesn't exist.

  /remove-product-from-liked:
    delete:
      summary: Deletes a selected product from the liked list.
      security:
        - jwt: []
      tags:
        - users
      parameters:
        - name: email
          in: path
          required: true
          example: "hello@there.com"
          schema:
            type: string
        - name: id
          in: path
          required: true
          example: "65a7ca3646c4604a98e143df"
          schema:
            type: string
      responses:
        '200':
          description: A product was removed from the liked.
        '404':
          description: Requested user or product doesn't exist.

  /remove-product-from-purchased:
    delete:
      summary: Removes product from the purchased list.
      description: This endpoint is used to emulate cancelling a payment. Since we don't have real banking integration, we can only remove it from the purchased products.
      security:
        - jwt: []
      tags:
        - users
      parameters:
        - name: email
          in: path
          required: true
          example: "hello@there.com"
          schema:
            type: string
        - name: id
          in: path
          required: true
          example: "65a7ca3646c4604a98e143df"
          schema:
            type: string
      responses:
        '200':
          description: A product was removed from the liked.
        '404':
          description: Requested user or product doesn't exist.

  /get-products:
    post:
      summary: Searches for products by parameters.
      description: This endpoint accepts a set of properties and tries to filter out the products that satisfy it.
      tags:
        - products
      requestBody:
        description: The product-independent search filter to look for products with.
        content:
          application/json:
            schema:
              type: object
            properties:
              model:
                type: string
                description: The string of the model to search.
                example: "Lenovo ThinkBook 14"
              memory:
                type: int
                description: The available memory in gigabytes.
                example: 12
              lowerPriceBond:
                type: int
                description: The lower price bond in dollars to show.
                example: 150
              upperPriceBond:
                type: int
                description: The upper price bond in dollars to show.
      responses:
        '200':
          description: All products were found and returned to the caller.

  /get-random-products:
    get:
      summary: Retrieves random products.
      description: This endpoint returns random products from the store before anything is shown.
      tags:
        - products
      responses:
        '200':
          description: Products were found and returned.

  /search-products-by-search:
    post:
      summary: Retrieves the products by a search query.
      description: This endpoint will take the string provided by user and find all products that contain the keywords in their description field.
      tags:
        - products
      requestBody:
        description: The search query of user.
        content:
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Any products that match the search are collected and transmitted.

  /get-laptops-by-text:
    post:
      summary: Retrieves all laptops using search query.
      description: This endpoint looks for any laptops that contain keywords in their "description" field.
      tags:
        - laptops
      requestBody:
        description: The string to search by.
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Returns all laptops that satisfy the search query.

  /get-laptops:
    post:
      summary: Retrieves all laptops by filter.
      description: This endpoint accepts a filter object that specifies a number of properties the user is looking for and searches for any products that satisfy them.
      tags:
        - laptops
      requestBody:
        description: The filter object to sort the laptops out.
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
              lowerPriceBond:
                type: int
                description: The smallest price in dollars to show. Anything below it is not displayed.
                example: 150
              upperPriceBond:
                type: int
                description: The largest price in dollars to show. Anything above it is not displayed.
                example: 100000
              memory:
                type: int
                description: Built-in RAM in gigabytes.
                example: 16
              brand:
                type: string
                description: The producer of laptop.
                example: "Dell"
              os:
                type: string
                description: Pre-installed operating system.
                example: "Windows"
              model:
                type: string
                description: The advertised model name.
                example: "ThinkPad X1 Carbon"
      responses:
        '200':
          description: All laptops satisfying the criteria were found and returned.

  /get-random-laptops:
    get:
      summary: Gives random laptops.
      description: Searches for some random laptops from the database. This endpoint is primarily used to populate the homepage before any requests are made.
      tags:
        - laptops
      responses:
        '200':
          description: Random laptops were collected and returned.

  /create-laptop:
    post:
      summary: Creates a new laptop in the store.
      security:
        - jwt: ["admin"]
      tags:
        - laptops
      requestBody:
        description: The new laptop object to save. If the same laptop already exists in the database, its stock count will be incremented isntead.
        content:
          multipart/form-data:
            schema:
              type: object
            properties:
              model:
                type: string
                description: The model name to save by.
                example: "Asus Zenbook Duo"
              brand:
                type: string
                description: The producer of laptop.
                example: "Asus"
              price:
                type: int
                description: The price of laptop in dollars.
                example: 129
              photo:
                type: file
                description: The thumbnail picture of the laptop. Accepts .png, .jpeg and .webp formats.
              os:
                type: string
                description: The operating system pre-installed on the laptop.
                example: "Linux"
              memory:
                type: int
                description: The available RAM in gigabytes.
                example: 8
              description:
                type: string
                description: The description string. It will be used to search the laptop by keywords it contains. May contain advertised text.
                example: "The innovative dual-screen design makes it the best laptop for tech enthusiasts who need the best productivity solution and effortless multitasking."
      responses:
        '200':
          description: Laptop was successfully added to the store and the laptop id is returned in the response body.
          content:
            text/plain:
              schema:
                type: string
          example: "65a7d879f59b3048b2d6af93"
        '401':
          description: The user is either logged out or doesn't have the "admin" role required to add products.

  /update-laptop:
    post:
      summary: Edits an existing laptop.
      description: Modifies parameters of the existing laptop. It can be used to change price, picture, available items, etc.
      tags:
        - laptops
      parameters:
        - name: id
          in: path
          description: The laptop id to edit.
          required: true
          example: "65a7d8b6ba978db8f5fd58b0"
          schema:
            type: string
      requestBody:
        description: A new laptop object to substitute the previous one by.
      responses:
        '200':
          description: The laptop was successfully edited. Beware the previous changes do not save.
        '401':
          description: The user is either logged out or doesn't have the "admin" role required to add products.
        '404':
          description: The target laptop does not exist.

  /delete-laptop:
    delete:
      summary: Removes a laptop from sale.
      description: This endpoint will remove the laptop from the database and make it no longer sellable.
      tags:
        - laptops
      parameters:
        - name: id
          in: path
          description: The laptop id.
          required: true
          example: "65a7d9697e4f1d05492a32bd"
          schema:
            type: string
      responses:
        '200':
          description: Laptop was deleted successfully.
        '401':
          description: The user is either logged out or doesn't have the "admin" role required to add products.
        '404':
          description: The target laptop does not exist.

  /get-smartphones-by-text:
    post:
      summary: Retrieves all smartphones that contain the specified keywords in their description.
      description: This endpoint accepts the search query string provided by user and searches for all smartphones that contain the keywords in them.
      tags:
        - smartphones
      requestBody:
        description: The search string.
        content:
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: All laptops fitting the request were found and returned.

  /get-random-smartphones:
    get:
      summary: Retrieves random smartphones.
      description: This endpoint searches for some random smartphones to display.
      tags:
        - smartphones
      responses:
        '200':
          description: Random smartphones were found and returned.

  /get-smartphones:
    post:
      summary: Retrieves all smartphones by the filter.
      description: This endpoint accepts a set of parameters provided by user and finds all smartphones that match them.
      tags:
        - smartphones
      requestBody:
        description: The filter object to sort the smartphones out.
        content:
          application/json:
            schema:
              type: object
            properties:
              lowerPriceBond:
                type: int
                description: The lowest price to display in dollars.
                example: 100
              upperPriceBond:
                type: int
                description: The highest price to display in dollars.
                example: 1200
              memory:
                type: int
                description: The installed RAM in gigabytes.
                example: 4
              brand:
                type: string
                description: The producer of smartphone.
                example: "Nokia"
              os:
                type: string
                description: The pre-installed mobile OS.
                example: "Android"
              model:
                type: string
                description: The model of the product, it will be displayed as its title.
                example: "Nokia 3310"
      responses:
        '200':
          description: All smartphones fitting the request were found.

  /create-smartphone:
    post:
      summary: Creates a new smartphone in the store.
      description: This endpoint will create a new smartphone that can be searched, displayed and bought. Requires "admin" role.
      security:
        - jwt: ["admin"]
      tags:
        - smartphones
      requestBody:
        description: The smartphone object to make.
        content:
          multipart/form-data:
            schema:
              type: object
            properties:
              model:
                type: string
                description: The model string as advertised by producer.
                example: "Motorola Edge"
              brand:
                type: string
                description: The producer of the smartphone.
                example: "Motorola"
              price:
                type: int
                description: The price of the product in dollars.
                example: 350
              photo:
                type: file
                description: The demonstration photo to display of the product.
              os:
                type: string
                description: The pre-installed operating system.
                example: "Android"
              memory:
                type: int
                description: Pre-installed RAM in gigabytes.
                example: 3
              description:
                type: string
                description: The description string of the product.
                example: "Feel the comfort of curved edges aligning with the contours of your hand."
      responses:
        '200':
          description: Smartphone was created and its id was returned.
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: User is logged off or doesn't have the "admin" role required to add new products.
        '400':
          description: Some of the submitted data is not specified or wrong, for example submitting text in price or nonexistent OS.

  /update-smartphone:
    post:
      summary: Edits an existing smartphone.
      description: Replaces a smartphone with new data.
      security:
        - jwt: ["admin"]
      tags:
        - smartphones
      parameters:
        - name: id
          in: path
          description: The smartphone id.
          required: true
          schema:
            type: string
      requestBody:
        description: The new smartphone object with modified properties.
        content:
          multipart/form-data:
            schema:
              type: object
      responses:
        '200':
          description: Smartphone was edited and its id was returned.
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: User is logged off or doesn't have the "admin" role required to add new products.
        '400':
          description: Some of the submitted data is not specified or wrong, for example submitting text in price or nonexistent OS.

  /delete-smartphone:
    delete:
      summary: Removes a smartphone from the store.
      security:
        - jwt: ["admin"]
      tags:
        - smartphones
      parameters:
        - name: id
          in: path
          description: Smartphone id to delete.
          required: true
          example: "65a7e357fce9bc922703249b"
          schema:
            type: string
      responses:
        '200':
          description: Target smartphone was deleted successfully.
        '401':
          description: User is logged off or doesn't have the "admin" role required to delete products.
